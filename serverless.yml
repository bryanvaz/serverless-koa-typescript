
service: koa-ts

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev # Set the default stage used. Default is dev
  region: ${file(serverless.env.yml):provider.region, us-east-1} # Overwrite the default region used. Default is us-east-1
  profile: ${file(serverless.env.yml):provider.profile, default} # The default profile to use with this service
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  timeout: 30 # The default is 6 seconds
  logRetentionInDays: 14
  endpointType: REGIONAL # Default API Gateway Endpoints should be regional. Other Options are: PRIVATE, or EDGE (serverless default)

plugins:
  - serverless-plugin-select # Select functions to be deployed based on stage/region
  - serverless-webpack       # Packages and parses functions for lambda
  - '@anttiviljami/serverless-stack-output'  # Outputs final AWS stack details for downstream CI/CD processing 

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  # For serverless-webpack
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true
    packager: 'yarn'   # Packager that will be used to package your external modules
  
  # serverless-stack-output
  output:
    # handler: scripts/output.handler # Same syntax as you already know
    file: .serverless/stack.json # toml, yaml, yml, and json format is available

# you can add packaging information here
package:
  individually: true

functions:

  server:
    handler: functions/server.handler
    description: KoaJS Typescript API Server
    environment:
      # BASE_URL: ${file(serverless.env.yml):${self:custom.stage}.BASE_URL}
      SLS_STAGE: ${self:custom.stage}
      TOKEN_TTL: 1d
    events:
      - http:
          method: any
          path: '/{proxy+}'
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
    ApiGatewayRestApiName:
      Value:
        Ref: {"Fn::GetAtt": ["ApiGatewayRestApi", "Name"]}
    # RootResourceId:
    #   Value:
    #     Ref: RootResourceId
    # ExampleUserSecret:
    #   Value: {"Fn::GetAtt": ["ExampleUserKey", "SecretAccessKey"]}
    # ExampleStaticValue:
    #   Value: example-static-value

# resources:
#   Resources:
#     NewResource:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: my-new-bucket
#   Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
